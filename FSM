//Outline of FSM. Please change as need fit.

module fsm(clk, rst, x, y)
input clk, rst, x;
output          y;
reg             y;
reg [1:0]  cs, ns;

parameter
  s0 = 2'b00;   //Reset state
  s1 = 2'b01;   // write enable state
  s2 = 2'b10;  //  read enable state
  s3 = 2'b11;  //  error check state

always @ (cs)
begin
  case(cs)
    s0: y = 0;
    s1: y = 0;
    s2: y = 0;
    s3: y = 1;
    default y = 0;
  endcase
 end
 
 always @ (cs or x)
 begin
  case(cs)
    s0: if(x) ns = s1: //enable write
        else  ns = s2; //enable read
        
    s1: if(x) ns = s2;  //go to read enable
        else  ns = s1;  //continue writing to memory
    
    s2: if(x) ns = s2; //continue reading memory / error check / Call LCRC Module
        else  ns = s0; //if all is good, go to reset state and purge packets
     
    s3: if(x) ns = s3;  // resend NAK packets
        else  ns = s0;  // reset
        
    default ns = s0;
  endcase
 end
 
 always @ (posedge clk or posedge rst)
 begin
  if(rst) cs <= s0;
  else cs <= ns;
 end
 
 endmodule
  
